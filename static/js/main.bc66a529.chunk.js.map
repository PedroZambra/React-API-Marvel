{"version":3,"sources":["img/shield.png","components/Header.js","components/Character.js","App.js","services/getCharacters.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Img","lazy","e","then","bind","Character","props","className","key","id","href","urls","url","target","rel","title","name","react","fallback","photo","thumbnail","path","ext","extension","AppMarvel","_useState","useState","_useState2","Object","slicedToArray","characters","setCharacters","_useState3","_useState4","keyword","setKeyword","useEffect","apiURL","concat","process","fetch","res","json","data","console","log","results","getCharacters","handleFilterCharacter","filter","hero","toLowerCase","indexOf","length","components_Header","type","value","onChange","event","placeholder","map","getCharacter","src","shield","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MCUzBC,MARf,WACI,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,sBCHNC,EAAMC,eAAK,kBAAMP,EAAAQ,EAAA,GAAAC,KAAAT,EAAAU,KAAA,YAaRC,EAXG,SAACC,GAAD,OACdT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OAAOC,IAAKF,EAAMG,IAC7BZ,EAAAC,EAAAC,cAAA,KAAGW,KAAMJ,EAAMK,KAAK,GAAGC,IAAKC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,OACxElB,EAAAC,EAAAC,cAAA,UAAKO,EAAMU,MACXnB,EAAAC,EAAAC,cAACkB,EAAA,SAAD,CAAUC,SAAUrB,EAAAC,EAAAC,cAAA,2BAChBF,EAAAC,EAAAC,cAACC,EAAD,CAAKmB,MAAOb,EAAMc,UAAUC,KAAMC,IAAKhB,EAAMc,UAAUG,oCCsCxDC,MAvCf,WAAqB,IAAAC,EACiBC,mBAAS,IAD1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACAI,EADAJ,EAAA,GAAAK,EAEWN,mBAAS,IAFpBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEZE,EAFYD,EAAA,GAEHE,EAFGF,EAAA,GAInBG,oBAAU,YCZG,WACX,IAAMC,EAAM,wEAAAC,OAA2EC,oCAEvF,OAAOC,MAAMH,GACVlC,KAAK,SAAAsC,GAAG,OAAIA,EAAIC,SAChBvC,KAAK,SAAAwC,GAEJ,OADEC,QAAQC,IAAIF,GACPA,EAAKA,KAAKG,WDMrBC,GAAgB5C,KAAK,SAAA2B,GAAU,OAAIC,EAAcD,MAChD,IAEH,IAIMkB,EAAwBlB,EAAWmB,OAAQ,SAAAC,GAC/C,OAAkE,IAA3DA,EAAKlC,KAAKmC,cAAcC,QAAQlB,EAAQiB,iBAGjD,OAAGrB,EAAWuB,OAAO,EAEjBxD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuD,EAAD,MACAzD,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOwD,KAAK,SAASC,MAAOtB,EAASuB,SAd1B,SAAAC,GACnBvB,EAAWuB,EAAM7C,OAAO2C,QAa6CG,YAAY,WAAWlD,GAAG,YAEzFZ,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACZyC,EAAsBY,IAAI,SAACC,GAAD,OAAkBxD,EAAUwD,QAO7DhE,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACbV,EAAAC,EAAAC,cAAA,OAAK+D,IAAKC,IAAQxD,UAAU,SAASyD,IAAI,OE7B7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,KAAK,SAAA2E,GACjCA,EAAaC","file":"static/js/main.bc66a529.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shield.a63ab2f1.png\";","import React from 'react';\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>\r\n            <h1>MARVEL</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n","import React, {lazy, Suspense} from 'react';\r\n\r\nconst Img = lazy(() => import(\"./Img.js\"));\r\n\r\nconst Character = (props) => (\r\n    <div className=\"hero\" key={props.id}>\r\n        <a href={props.urls[0].url} target=\"_blank\" rel=\"noopener noreferrer\" title=\"Web\">\r\n            <h2>{props.name}</h2>\r\n            <Suspense fallback={<span>Loading...</span>}>\r\n                <Img photo={props.thumbnail.path} ext={props.thumbnail.extension}/>\r\n            </Suspense>\r\n        </a>\r\n    </div>\r\n)\r\n\r\nexport default Character;","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport Header from './components/Header.js';\nimport Character from './components/Character.js';\nimport getCharacters from './services/getCharacters';\nimport shield from './img/shield.png'\n\nfunction AppMarvel() {\n  const [characters, setCharacters] = useState([])\n  const [keyword, setKeyword] = useState('')\n\n  useEffect(function() {  \n    getCharacters().then(characters => setCharacters(characters))\n  }, [])\n\n  const handleSearch = event => {\n    setKeyword(event.target.value)\n  }\n\n  const handleFilterCharacter = characters.filter( hero => {\n    return hero.name.toLowerCase().indexOf(keyword.toLowerCase())!== -1\n  })\n\n  if(characters.length>0){\n    return (\n      <div>\n        <Header/>\n        <section>\n          <form>\n            <input type=\"search\" value={keyword} onChange={handleSearch} placeholder=\"Buscador\" id=\"search\"/>\n          </form>\n          <div className=\"container\">\n            {handleFilterCharacter.map((getCharacter) => Character(getCharacter))}\n          </div>\n        </section>\n      </div>\n    )\n  } else {\n    return(\n      <div className=\"load\">\n        <img src={shield} className=\"shield\" alt=\"\"/>\n      </div>\n    )\n  }\n}\n\nexport default AppMarvel;\n","export default function getCharacters() {\r\n    const apiURL = `https://gateway.marvel.com:443/v1/public/characters?limit=100&apikey=${process.env.REACT_APP_MARVEL_APIKEY}`;\r\n    \r\n    return fetch(apiURL)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n          console.log(data)\r\n        return data.data.results\r\n      })\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppMarvel from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppMarvel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}