{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppMarvel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","characters","search","_this2","fetch","then","res","json","character","setState","data","results","event","target","value","substr","_this3","console","log","filterCharacter","filter","hero","name","toLowerCase","indexOf","length","react_default","a","createElement","type","onChange","updateSearch","bind","placeholder","id","className","map","pj","index","App_Character","key","photo","thumbnail","path","ext","extension","shop","urls","url","React","Component","Character","href","title","src","concat","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAIMA,qBACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,GACZC,OAAO,IAJOT,mFAQC,IAAAU,EAAAP,KACjBQ,MAAM,0HACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAEFL,EAAKM,SAAS,CAAER,WAAYO,EAAUE,KAAKC,iDAKpCC,GACXhB,KAAKa,SAAS,CAACP,OAAOU,EAAMC,OAAOC,MAAMC,OAAO,EAAE,uCAG5C,IAAAC,EAAApB,KACNqB,QAAQC,IAAKtB,KAAKI,MAAMC,YAGxB,IAAIkB,EAAkBvB,KAAKI,MAAMC,WAAWmB,OAC1C,SAACC,GAAU,OAA4E,IAArEA,EAAKC,KAAKC,cAAcC,QAAQR,EAAKhB,MAAME,OAAOqB,iBAGtE,OAAG3B,KAAKI,MAAMC,WAAWwB,OAAO,EAE5BC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASf,MAAOlB,KAAKI,MAAME,OAAQ4B,SAAUlC,KAAKmC,aAAaC,KAAKpC,MAAOqC,YAAY,WAAWC,GAAG,WACjHR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACZhB,EAAgBiB,IAAI,SAACC,EAAIC,GAAL,OAAeZ,EAAAC,EAAAC,cAACW,EAAD,CAAWC,IAAKF,EAAOhB,KAAMe,EAAGf,KAAMmB,MAAOJ,EAAGK,UAAUC,KAAMC,IAAKP,EAAGK,UAAUG,UAAWC,KAAMT,EAAGU,KAAK,GAAGC,UAOxJtB,EAAAC,EAAAC,cAAA,+BA9CkBqB,IAAMC,YAmDxBC,EAAY,SAAC3D,GAAD,OACdkC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,QACbT,EAAAC,EAAAC,cAAA,KAAGwB,KAAM5D,EAAMsD,KAAMjC,OAAO,SAASwC,MAAM,OACzC3B,EAAAC,EAAAC,cAAA,UAAKpC,EAAM8B,MAEXI,EAAAC,EAAAC,cAAA,OAAK0B,IAAG,GAAAC,OAAK/D,EAAMiD,MAAX,KAAAc,OAAoB/D,EAAMoD,KAAOY,IAAI,iBAMtCjE,ICtDKkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,KAAK,SAAAiE,GACjCA,EAAaC","file":"static/js/main.a0929caa.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass AppMarvel extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      characters: [],\n      search:''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://gateway.marvel.com:443/v1/public/characters?orderBy=-modified&limit=50&apikey=3807b873586a20c861ef6a4be192963a')\n    .then(res => res.json())\n    .then(character => {\n      // console.log(character);\n        this.setState({ characters: character.data.results}) \n    })\n  }\n\n  //SEARCH\n  updateSearch(event){\n    this.setState({search:event.target.value.substr(0,30)});\n  }\n\n  render(){\n    console.log( this.state.characters)\n\n    //FILTER\n    let filterCharacter = this.state.characters.filter(\n      (hero) => {return hero.name.toLowerCase().indexOf(this.state.search.toLowerCase())!== -1}\n    );\n    \n    if(this.state.characters.length>0){\n      return(\n        <div>\n          <header>\n            <h1>MARVEL</h1>\n          </header>\n          <input type=\"search\" value={this.state.search} onChange={this.updateSearch.bind(this)} placeholder=\"Buscador\" id=\"search\"/>\n          <div className=\"container\">\n            {filterCharacter.map((pj, index) => <Character key={index} name={pj.name} photo={pj.thumbnail.path} ext={pj.thumbnail.extension} shop={pj.urls[0].url}/>)}\n          </div>\n        </div>\n        \n      )\n    }\n    return(\n      <p>Cargando...</p>\n    )\n  }\n}\n\nconst Character = (props) =>(\n    <div className=\"hero\">\n      <a href={props.shop} target=\"_blank\" title=\"Web\">\n        <h2>{props.name}</h2>\n        {/* {console.log(props.photo)}  */}\n        <img src={`${props.photo}.${props.ext}`} alt=\"Personaje\"/>\n      </a>\n    </div>\n)\n\n\nexport default AppMarvel;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppMarvel from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppMarvel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}